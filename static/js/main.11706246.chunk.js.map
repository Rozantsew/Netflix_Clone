{"version":3,"sources":["assets/styles/mediaQueries.js","assets/styles/GlobalStyle.js","assets/styles/Theme.js","Components/row/Row.styled.js","axios.js","Components/row/Row.js","requests.js","Components/rowContainer/RowContainer.js","Components/nav/Nav.styled.js","Components/nav/Nav.js","Components/banner/Banner.styled.js","Components/banner/Banner.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","xs","sm","md","lg","xl","mediaQueries","key","style","GlobalStyles","createGlobalStyle","theme","primaryDark","primaryLight","primaryHover","mobile","Theme","children","StyledHeader","styled","h2","RowPosters","div","RowPoster","img","LargerRow","instance","axios","create","baseURL","base_url","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","map","id","onClick","src","poster_path","alt","backdrop_path","videoId","opts","host","height","width","playerVars","API_KEY","requests","fetchPopular","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","RowContainer","NavBar","nav","Logo","LogoMobile","LoginButton","button","LogIn","ButtonWrapper","Nav","HeroBanner","header","HeroTitle","h1","BannerContents","BannerWrapper","BannerButton","StyledTitleDescription","h3","BannerFadeBottom","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.11706246.chunk.js","sourcesContent":["export const breakpoints = {\n  xs: 500,\n  sm: 769,\n  md: 992,\n  lg: 1240,\n  xl: 1600,\n};\n\nexport const mediaQueries = (key) => {\n  return (style) => `@media (min-width: ${breakpoints[key]}px) { ${style} }`;\n};\n","import { createGlobalStyle } from \"styled-components\";\nimport { mediaQueries } from \"./mediaQueries\";\nexport const GlobalStyles = createGlobalStyle`\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n  body {\n    background-color: #fff;\n    position: relative;\n    overflow-x: hidden;\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;\n  }\n\np,\na,\nul,\nli {\n  text-decoration: none;\n  list-style: none;\n  font-family: \"Lato\", sans-serif;\n  font-size: 16px;\n  margin-top: 30px;\n    line-height: 1.7;\n    max-width: 42em;\n    ${mediaQueries(\"md\")`\n      font-size: 17px;\n    `}\n}\na {\n  cursor: pointer;\n  margin-top: 0px;\n}\n\nimg {\n  width: 100%;\n}\n\n\n\n`;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\n\n// Code is for navbar needs\nconst theme = {\n  primaryDark: \"#313030\",\n  primaryLight: \"#EFFFFA\",\n  primaryHover: \"#3490ff;\",\n  mobile: \"576px\",\n};\n\nconst Theme = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import styled from \"styled-components\";\nimport { mediaQueries } from \"../../assets/styles/mediaQueries\";\n\nexport const StyledHeader = styled.h2`\n  text-align: left;\n  margin: 10px;\n  margin-left: 20px;\n  color: #fff;\n\n  ${mediaQueries(\"md\")`\n    text-align: left;\n  `};\n`;\n\nexport const RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px 0px;\n  margin-left: 20px;\n  \n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nexport const RowPoster = styled.img`\n  width: 100%;\n  object-fit: contain;\n  max-height: 100px;\n  transition: transform 450ms;\n  margin-right: 10px;\n\n  &:hover {\n    transform: scale(1.08);\n    opacity: 1;\n  }\n`;\n\nexport const LargerRow = styled(RowPoster)`\n  max-height: 250px;\n\n  &:hover {\n    transform: scale(1.09);\n  }\n`;\n","import axios from \"axios\"\n\n// base url to make requests to the the movie database\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport { StyledHeader, RowPosters, RowPoster, LargerRow } from \"./Row.styled\";\nimport axios from \"../../axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\"\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\")\n\n  // A snippet of code which runs based on a specific condition/variable\n  useEffect(() => {\n    // pulling information when it loads\n    // if [], run once when the row loads, and dont run it again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    host: 'https://www.youtube.com',\n    height: \"390px\",\n    width: \"100%\",\n    playerVars: {\n      'autoplay': 1,\n      'controls': 0,\n      'autohide': 1,\n      'wmode': 'opaque',\n      'origin': 'http://localhost:3000'\n    }\n  }\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n          console.log(urlParams)\n        })\n        .catch((error) => console.log(error));\n    }\n  }\n\n  return (\n    <div>\n      <StyledHeader>{title}</StyledHeader>\n      <RowPosters>\n        {/*several row poster*/}\n        {movies.map((movie) => {\n          // Conditionali render row\n          return isLargeRow ? (\n            <LargerRow\n              key={movie.id}\n              onClick={() => handleClick(movie)}\n              src={`${base_url}${movie.poster_path}`}\n              alt={movie.name}\n            />\n          ) : (\n              <RowPoster\n                key={movie.id}\n                onClick={() => handleClick(movie)}\n                src={`${base_url}${movie.backdrop_path}`}\n                alt={movie.name}\n              />\n            );\n        })}\n      </RowPosters>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      {/* <YouTube videoId={trailerUrl} opts={opts} /> */}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"f6de3fd510a1a08c1cd7135d869d034b\";\n\nconst requests = {\n    fetchPopular: `discover/movie?api_key=f6de3fd510a1a08c1cd7135d869d034b&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=true&page=1`,\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `discover/tv?api_key=${API_KEY}&with_networks-213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_generes=99`,\n}\n\n\nexport default requests\n","import React from \"react\";\nimport Row from \"../row/Row\";\nimport requests from \"../../requests\";\n\nconst RowContainer = () => {\n  return (\n    <div>\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Popular\" fetchUrl={requests.fetchPopular} />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row isLargeRow title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n};\n\nexport default RowContainer;\n","import styled from \"styled-components\"\nimport { mediaQueries } from \"../../assets/styles/mediaQueries\";\n\nexport const NavBar = styled.nav`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 10px 15px;\n    position: sticky;\n    top: 0px;\n    background-color: #111;\n`;\n\nexport const Logo = styled.img`\n    width: 136px;\n    height: 36px;\n    display: none;\n    ${mediaQueries(\"xs\")`\n    display: block;\n`};\n`;\n\nexport const LogoMobile = styled.img`\n    height: 36px;\n    width: 25px;\n    display: block;\n    ${mediaQueries(\"xs\")`\n    display: none;\n`};\n`;\n\nexport const LoginButton = styled.button`\n    min-width: 112px;\n    padding: 9px 20px;\n    font-size: 16px;\n    margin: 0 0 0 8px;\n    color: #fff;\n    background-color: #e50914;\n    vertical-align: middle;\n    cursor: pointer;\n    font-weight: 400;\n    letter-spacing: .1px;\n    border-radius: 3px;\n    border: none;\n    opacity: 0.9;\n\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nexport const LogIn = styled(LoginButton)`\n    font-weight: 400;\n    border: 1px solid #888;\n    background-color: transparent;\n\n    &:hover {\n        text-decoration: none;\n        background-color: rgba(150,150,150,.3);\n    }\n`;\n\nexport const ButtonWrapper = styled.div`\n    display: flex;\n`;","import React from \"react\";\nimport { NavBar, LogoMobile, Logo, ButtonWrapper, LoginButton, LogIn } from \"./Nav.styled\"\n\nconst Nav = () => {\n  return (\n    <NavBar>\n      <LogoMobile\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0c/Netflix_2015_N_logo.svg\"\n        alt=\"Netflix Logo\"\n      />\n      <Logo\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix Logo\"\n      />\n      <ButtonWrapper>\n        <LoginButton>Sing Up</LoginButton>\n        <LogIn>Login In</LogIn>\n      </ButtonWrapper>\n    </NavBar>\n  );\n};\n\nexport default Nav;\n","import styled from \"styled-components\";\nimport { mediaQueries } from \"../../assets/styles/mediaQueries\";\n\nexport const HeroBanner = styled.header`\n  color: white;\n  object-fit: contain;\n  background-position: 100% 50%;\n  height: 448px;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  padding-top: 140px;\n  margin-bottom: 30px;\n`;\n\nexport const HeroTitle = styled.h1`\n  color: #fff;\n  text-align: left;\n  // padding: 50px;\n  font-size: 3rem;\n  font-weight: 800;\n  padding-bottom: 0.3rem;\n`;\n\nexport const BannerContents = styled.div`\n  margin-left: 30px;\n  height: 190px;\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: flex-start;\n`;\n\nexport const BannerWrapper = styled.div``;\n\nexport const BannerButton = styled.button`\n  cursor: pointer;\n  color: #fff;\n  outline: 0;\n  border: none;\n  font-weight: 700;\n  border-radius: 0.2vw;\n  padding-left: 2rem;\n  padding-right: 2rem;\n  margin-right: 1em;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  background-color: rgba(51, 51, 51, 0.5);\n\n  &:hover {\n    color: #000;\n    background-color: #e6e6e6;\n    transition: ease-in-out 0.4s;\n  }\n`;\n\nexport const StyledTitleDescription = styled.h3`\n  width: 42rem;\n  line-height: 1.3;\n  padding-top: 1rem;\n  max-width: 280px;\n  height: 80px;\n  font-size: 0.8rem;\n  text-align: left;\n\n  ${mediaQueries(\"xs\")`\n    max-width: 360px;\n`};\n`;\n\nexport const BannerFadeBottom = styled.div`\n  height: 7.4rem;\n  background-image: linear-gradient(\n    180deg,\n    transparent,\n    rgba(37, 37, 37, 0.61),\n    #111\n  );\n  width: 100%;\n`;\n","import axios from \"../../axios\";\nimport React, { useState, useEffect } from \"react\";\nimport requests from \"../../requests\";\nimport {\n  BannerContents,\n  HeroBanner,\n  HeroTitle,\n  BannerWrapper,\n  BannerButton,\n  StyledTitleDescription,\n  BannerFadeBottom,\n} from \"./Banner.styled\";\nimport { HashRouter } from \"react-router-dom\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <HashRouter>\n      <HeroBanner\n        style={{\n          backgroundSize: \"cover\",\n          backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\n          backgroundPosition: \"70% 20%\",\n        }}\n      >\n        <BannerContents>\n          <HeroTitle>\n            {movie?.title || movie?.name || movie?.original_name}\n          </HeroTitle>\n\n          <BannerWrapper>\n            <BannerButton>Play</BannerButton>\n            <BannerButton>My List</BannerButton>\n          </BannerWrapper>\n          <StyledTitleDescription>\n            {truncate(movie?.overview, 150)}\n          </StyledTitleDescription>\n        </BannerContents>\n        <BannerFadeBottom></BannerFadeBottom>\n      </HeroBanner>\n    </HashRouter>\n  );\n};\n\nexport default Banner;\n","import React from \"react\";\nimport \"./App.css\";\nimport { GlobalStyles } from \"./assets/styles/GlobalStyle\";\nimport Theme from \"./assets/styles/Theme\";\nimport RowContainer from \"./Components/rowContainer/RowContainer\";\nimport Nav from \"./Components/nav/Nav\";\nimport Banner from \"./Components/banner/Banner\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Theme>\n        <GlobalStyles />\n        <Nav />\n        <Banner></Banner>\n        <RowContainer />\n      </Theme>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}