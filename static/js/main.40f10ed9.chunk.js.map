{"version":3,"sources":["assets/styles/mediaQueries.js","assets/styles/GlobalStyle.js","assets/styles/Theme.js","Components/row/Row.styled.js","axios.js","Components/row/Row.js","requests.js","Components/rowContainer/RowContainer.js","Components/nav/Nav.js","Components/banner/Banner.styled.js","Components/banner/Banner.js","App.js","serviceWorker.js","index.js"],"names":["breakpoints","xs","sm","md","lg","xl","mediaQueries","key","style","GlobalStyles","createGlobalStyle","theme","primaryDark","primaryLight","primaryHover","mobile","Theme","children","StyledHeader","styled","h2","RowPosters","div","RowPoster","img","LargerRow","instance","axios","create","baseURL","base_url","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","movie","id","src","poster_path","alt","name","backdrop_path","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","RowContainer","Nav","HeroBanner","header","HeroTitle","h1","BannerContents","Banner","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40f10ed9.chunk.js","sourcesContent":["export const breakpoints = {\n  xs: 500,\n  sm: 769,\n  md: 992,\n  lg: 1240,\n  xl: 1600,\n};\n\nexport const mediaQueries = (key) => {\n  return (style) => `@media (min-width: ${breakpoints[key]}px) { ${style} }`;\n};\n","import { createGlobalStyle } from \"styled-components\";\nimport { mediaQueries } from \"./mediaQueries\";\nexport const GlobalStyles = createGlobalStyle`\n\n*,\n*::after,\n*::before {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n  body {\n    background-color: #fff;\n    position: relative;\n    overflow-x: hidden;\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,Fira Sans,Droid Sans,Helvetica Neue,sans-serif;\n  }\n\np,\na,\nul,\nli {\n  text-decoration: none;\n  list-style: none;\n  font-family: \"Lato\", sans-serif;\n  font-size: 16px;\n  margin-top: 30px;\n    line-height: 1.7;\n    max-width: 42em;\n    ${mediaQueries(\"md\")`\n      font-size: 17px;\n    `}\n}\na {\n  cursor: pointer;\n  margin-top: 0px;\n}\n\nimg {\n  width: 100%;\n}\n\n\n\n`;\n","import React from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\n\n// Code is for navbar needs\nconst theme = {\n  primaryDark: \"#313030\",\n  primaryLight: \"#EFFFFA\",\n  primaryHover: \"#3490ff;\",\n  mobile: \"576px\",\n};\n\nconst Theme = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import styled from \"styled-components\";\nimport { mediaQueries } from \"../../assets/styles/mediaQueries\";\n\nexport const StyledHeader = styled.h2`\n  text-align: left;\n  margin: 10px;\n\n  ${mediaQueries(\"md\")`\n    text-align: left;\n  `};\n`;\n\nexport const RowPosters = styled.div`\n  display: flex;\n  overflow-y: hidden;\n  overflow-x: scroll;\n  padding: 20px;\n  margin-left: 10px;\n  \n  &::-webkit-scrollbar {\n    display: none;\n`;\n\nexport const RowPoster = styled.img`\n  width: 100%;\n  object-fit: contain;\n  max-height: 100px;\n  transition: transform 450ms;\n  margin-right: 10px;\n\n  &:hover {\n    transform: scale(1.08);\n    opacity: 1;\n  }\n`;\n\nexport const LargerRow = styled(RowPoster)`\n  max-height: 250px;\n\n  &:hover {\n    transform: scale(1.09);\n  }\n`;\n","import axios from \"axios\"\n\n// base url to make requests to the the movie database\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n})\n\nexport default instance;","import React, { useState, useEffect } from \"react\";\nimport { StyledHeader, RowPosters, RowPoster, LargerRow } from \"./Row.styled\";\nimport axios from \"../../axios\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n\n  // A snippet of code which runs based on a specific condition/variable\n  useEffect(() => {\n    // pulling information when it loads\n    // if [], run once when the row loads, and dont run it again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  return (\n    <div>\n      <StyledHeader>{title}</StyledHeader>\n      <RowPosters>\n        {/*several row poster*/}\n        {movies.map((movie) => {\n          // Conditionali render row\n          return isLargeRow ? (\n            <LargerRow\n              key={movie.id}\n              src={`${base_url}${movie.poster_path}`}\n              alt={movie.name}\n            />\n          ) : (\n            <RowPoster\n              key={movie.id}\n              src={`${base_url}${movie.backdrop_path}`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </RowPosters>\n\n      {/*container => posters*/}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"f6de3fd510a1a08c1cd7135d869d034b\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `discover/tv?api_key=${API_KEY}&with_networks-213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_generes=99`,\n}\n\nexport default requests\n","import React from \"react\";\nimport Row from \"../row/Row\";\nimport requests from \"../../requests\";\n\nconst RowContainer = () => {\n  return (\n    <div>\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row isLargeRow title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n};\n\nexport default RowContainer;\n","import React from \"react\";\n\nconst Nav = () => {\n  return (\n    <div>\n      <h2>Nav</h2>\n    </div>\n  );\n};\n\nexport default Nav;\n","import styled from \"styled-components\";\nimport { mediaQueries } from \"../../assets/styles/mediaQueries\";\n\nexport const HeroBanner = styled.header``;\n\nexport const HeroTitle = styled.h1`\n  color: #fff;\n  text-align: left;\n  padding: 50px;\n`;\n\nexport const BannerContents = styled.div`\n  width: auto;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"../../axios\";\nimport requests from \"../../requests\";\nimport { BannerContents, HeroBanner, HeroTitle } from \"./Banner.styled\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <HeroBanner\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\n        backgroundPosition: \"center\",\n      }}\n    >\n      <HeroTitle>\n        {movie?.title || movie?.name || movie?.original_name}\n      </HeroTitle>\n      <BannerContents></BannerContents>\n      {/*div width 2 buttons*/}\n      {/*description*/}\n    </HeroBanner>\n  );\n};\n\nexport default Banner;\n","import React from \"react\";\nimport \"./App.css\";\nimport { GlobalStyles } from \"./assets/styles/GlobalStyle\";\nimport Theme from \"./assets/styles/Theme\";\nimport RowContainer from \"./Components/rowContainer/RowContainer\";\nimport Nav from \"./Components/nav/Nav\";\nimport Banner from \"./Components/banner/Banner\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Theme>\n        <GlobalStyles />\n        <Nav />\n        <Banner></Banner>\n        <RowContainer />\n      </Theme>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}